#include<iostream>
#include<stack>
using namespace std;

struct node{
    char data;
    node* left;
    node* right;
};

node* exptree(string prefix){
    stack <node*> stk;
    for(int i=prefix.length() -1; i>=0; i--)
    {
        char ch= prefix[i];
        node* newnode = new node;
        newnode->data = ch;
        newnode->left = newnode->right = NULL;

        if(isalnum(ch)){
            stk.push(newnode);
        }
        else{
            newnode->left = stk.top();
            stk.pop();
            newnode->right = stk.top();
            stk.pop();
            stk.push(newnode);
        }
    }
    return stk.top();
}

void postorder(node* root){
    if(root == NULL){
        return;
    }
    stack <node*> stk;
    node* current = root;
    node* lastvisited =  NULL;

    while(!stk.empty() || current != NULL){
        if(current != NULL){
            stk.push(current);
            current= current->left;
        }
        else{
            node* topnode= stk.top();
            if(topnode->right != NULL && topnode->right != lastvisited){
                current = topnode->right;
            }
            else{
                cout<<topnode->data<<" ";
                stk.pop();
                lastvisited = topnode;
            }
        }
    }
}

void deletetree(node* root){
    if(root == NULL)
    {
        return;
    }
    deletetree(root->left);
    deletetree(root->right);
    delete root;
}  

int main()
{
    string prefix = "+--a*bc/def";
    node* root = exptree(prefix);
    cout<<"postorder is : ";
    postorder(root);
    cout<<endl;
    deletetree(root);
    cout<<"tree deleted ";
}
